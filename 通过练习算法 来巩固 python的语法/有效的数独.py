from typing import List


def isValidSudoku(board:List[List[str]]) ->bool:
    """
    判断数独是否有效
    :param board:
    :return:
    """
    def is_valid(arr):
        """
        判断数组是否有效
        :param arr:
        :return:
        """
        seen = set(num for num in arr if num != '.') # set() 函数创建一个无序不重复元素集
        return len(seen) == sum(1 for num in arr if num != '.') # sum() 函数用于对整个列表求和,1 for num in arr if num != '.' 生成器表达式,返回1的个数

    # 行
    for row in board:
        if not is_valid(row):
            return False

    # 列
    for col in zip(*board): # zip() 函数用于将可迭代的对象作为参数,将对象中对应的元素打包成一个个元组,然后返回由这些元组组成的对象
        if not is_valid(col):
            return False

    # 3*3
    for i in (0,3,6): #这是一个生成器表达式,生成0,3,6
        for j in (0,3,6): #这是一个生成器表达式,生成0,3,6
            box = [board[x][y] for x in range(i,i+3) for y in range(j,j+3)] # 生成器表达式,生成3*3的数组,然后判断是否有效,如果无效,返回False
            if not is_valid(box):
                return False

    return True

if __name__ == '__main__':
    board1 =[
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]

    board2 = [
        ["8","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]

print(isValidSudoku(board1)) #True
print(isValidSudoku(board2)) #False